# 1 "ParsingFunctions.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "ParsingFunctions.cpp"
# 1 "ParsingFunctions.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "ParsingFunctions.cpp"


const char* PROCESSOR_COMANDS[] =
    {# 1 "ParsingFunctions.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "ParsingFunctions.cpp"


const char* PROCESSOR_COMANDS[] =
    {

# 1 "../../Arch/cmd.h" 1


"HLT",




"PUSH",

"POP",

"ADD",

"SUB",

"MUL",

"DIV",

"OUT",

"IN",

"JMP",
# 7 "ParsingFunctions.cpp" 2

    };

int stricmp (const char *s1, const char *s2 )
    {
    int i = 0;
    for( ; s1[i] && s2[i]; i++)
        if ((tolower(s1[i]) != tolower(s2[i])))
            return s1[i] - s2[i];

    return (s1[i] - s2[i]);
    }

cmd_code CompareLineWithComands (const char* asm_comand)
    {
    if (!asm_comand)
        return -1;




# 1 "../../Arch/cmd.h" 1


if (!stricmp(asm_comand, PROCESSOR_COMANDS[HLT])) return HLT;




if (!stricmp(asm_comand, PROCESSOR_COMANDS[PUSH])) return PUSH;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[POP])) return POP;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[ADD])) return ADD;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[SUB])) return SUB;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[MUL])) return MUL;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[DIV])) return DIV;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[OUT])) return OUT;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[IN])) return IN;

if (!stricmp(asm_comand, PROCESSOR_COMANDS[JMP])) return JMP;
# 29 "ParsingFunctions.cpp" 2


    return UNKNOWN_COMAND;
    }

reg_arg IsReg (const char* line)
    {
    if (!line)
        return ERORR_REG;

    int result = tolower(*(line + 1)) + 1 - 'a';

    return (reg_arg) ((result > 0 && result < 20) ? result : 0);
    }
